import { expect } from 'chai';
import { Game } from '../arcomage/src/app/engine/model/game'
import { PlayerMock } from './util/mock/player-mock'
import { GameState } from '../arcomage/src/app/engine/enum/game-state.enum';
import { GameSide } from '../arcomage/src/app/engine/enum/game-side.enum';
import CARDS from '../arcomage/src/assets/cards.json';
import { PlayerDTO } from '../arcomage/src/app/engine/dto/player-dto';
import { Waist } from '../arcomage/src/app/engine/model/waist';
import { CardIdx } from '../arcomage/src/app/engine/enum/card-idx.enum';
import _ from 'lodash';
import { CardDTO } from '../arcomage/src/app/engine/dto/card-dto';

describe('Game', function () {
    describe('#changeGameStateIfWin()', function () {
        it('expect changeGameStateIfWin set to GameState.END and whoWin set null if both player have tower >= towerHeightForWin', function () {
            const playerRed = PlayerMock.EmptyPlayer();
            playerRed.castle.tower = 11;
            const playerBlue = PlayerMock.EmptyPlayer();
            playerBlue.castle.tower = 10;
            const game = new Game(null, playerRed, playerBlue, 10);
            game['changeGameStateIfWin']();
            expect(game.gameState).to.be.equal(GameState.END);
            expect(game.whoWin).to.be.null;
        });
        it('expect changeGameStateIfWin set to GameState.END and playerRed as winner if playerRed have tower >= towerHeightForWin and playerBlue have tower < towerHeightForWin', function () {
            const playerRed = PlayerMock.EmptyPlayer();
            playerRed.castle.tower = 11;
            const playerBlue = PlayerMock.EmptyPlayer();
            playerBlue.castle.tower = 9;
            const game = new Game(null, playerRed, playerBlue, 10);
            game['changeGameStateIfWin']();
            expect(game.gameState).to.be.equal(GameState.END);
            expect(game.whoWin).to.be.equal(GameSide.PLAYER_RED);
        });
        it('expect changeGameStateIfWin set to GameState.END and playerBlue as winner if playerBlue have tower >= towerHeightForWin and playerRed have tower < towerHeightForWin', function () {
            const playerRed = PlayerMock.EmptyPlayer();
            playerRed.castle.tower = 9;
            const playerBlue = PlayerMock.EmptyPlayer();
            playerBlue.castle.tower = 11;
            const game = new Game(null, playerRed, playerBlue, 10);
            game['changeGameStateIfWin']();
            expect(game.gameState).to.be.equal(GameState.END);
            expect(game.whoWin).to.be.equal(GameSide.PLAYER_BLUE);
        });
        it('expect changeGameStateIfWin set to GameState.END and whoWin set null if both player have tower == 0', function () {
            const playerRed = PlayerMock.EmptyPlayer();
            playerRed.castle.tower = 0;
            const playerBlue = PlayerMock.EmptyPlayer();
            playerBlue.castle.tower = 0;
            const game = new Game(null, playerRed, playerBlue, 10);
            game['changeGameStateIfWin']();
            expect(game.gameState).to.be.equal(GameState.END);
            expect(game.whoWin).to.be.null;
        });
        it('expect changeGameStateIfWin set to GameState.END and playerRed as winner if playerRed have tower > 0 and playerBlue have tower == 0', function () {
            const playerRed = PlayerMock.EmptyPlayer();
            playerRed.castle.tower = 4;
            const playerBlue = PlayerMock.EmptyPlayer();
            playerBlue.castle.tower = 0;
            const game = new Game(null, playerRed, playerBlue, 10);
            game['changeGameStateIfWin']();
            expect(game.gameState).to.be.equal(GameState.END);
            expect(game.whoWin).to.be.equal(GameSide.PLAYER_RED);
        });
        it('expect changeGameStateIfWin set to GameState.END and playerBlue as winner if playerBlue have tower > 0 and playerRed have tower == 0', function () {
            const playerRed = PlayerMock.EmptyPlayer();
            playerRed.castle.tower = 0;
            const playerBlue = PlayerMock.EmptyPlayer();
            playerBlue.castle.tower = 11;
            const game = new Game(null, playerRed, playerBlue, 10);
            game['changeGameStateIfWin']();
            expect(game.gameState).to.be.equal(GameState.END);
            expect(game.whoWin).to.be.equal(GameSide.PLAYER_BLUE);
        });
        it('expect changeGameStateIfWin don\'t change gameState to GameState.END if both player have tower > 0 and < towerHeightForWin', function () {
            const playerRed = PlayerMock.EmptyPlayer();
            playerRed.castle.tower = 5;
            const playerBlue = PlayerMock.EmptyPlayer();
            playerBlue.castle.tower = 3;
            const game = new Game(null, playerRed, playerBlue, 10);
            game['changeGameStateIfWin']();
            expect(game.gameState).to.be.equal(GameState.PLAY);
            expect(game.whoWin).to.be.null;
        });
    });
    describe('#playCard() for every card', function () {
        let playerRed: PlayerDTO;
        let playerBlue: PlayerDTO;
        let game: Game;
        let card: CardDTO = null;
        function setTestedCard(cardName: string) {
            card = _.find(CARDS, { 'name': cardName});
            playerRed.cards[CardIdx.ONE] = card;
        }
        function cardTestCase(cardName: string, testSuite: () => void, alternativeDescription?: string) {
            it(alternativeDescription ? alternativeDescription : 'test ' + cardName + ' card', function () {
                setTestedCard(cardName);
                testSuite();
            });
        }
        this.beforeEach(function() {
            playerRed = PlayerMock.ExamplePlayerRed();
            playerBlue = PlayerMock.ExamplePlayerBlue();
            game = new Game(new Waist(), playerRed, playerBlue, 50);
            game.lastUsedCards = [];
            card = null;
        })
        cardTestCase('r1', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 6);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState - 6 + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r2', function () {
            playerBlue.castle.wall = 1
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 1);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.true;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 1);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.false;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r3', function () {
            playerBlue.castle.wall = 1
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 3);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 1);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 3);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r4', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 3);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth + 1);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r5', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 2);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.true;
            expect(playerRed.haveCardToDiscard).to.be.equal(1);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.false;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r6', function () {
            playerRed.castle.wall = 2;
            playerBlue.castle.wall = 2;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 3);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState - 1);
            expect(playerRed.castle.wall).to.be.equal(0);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 4);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r7', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 4);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall - 1);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 3);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r7', function () {
            playerRed.castle.wall = 0;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 4);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState - 1);
            expect(playerRed.castle.wall).to.be.equal(0);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 3);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        }, 'test r7 card for playerRed who have no wall');
        cardTestCase('r8', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 6);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.true;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 2);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.false;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r9', function () {
            playerBlue.castle.wall = 2;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 3);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 3);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r10', function () {
            playerBlue.castle.wall = 2;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 5);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 3);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 2);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r11', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 6);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 4);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r12', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 7);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth + 2);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r13', function () {
            playerBlue.castle.wall = 1;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 8);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState + 2);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 4);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 1);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
    });
});

