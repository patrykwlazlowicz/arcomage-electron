import { expect } from 'chai';
import { Game } from '../arcomage/src/app/engine/model/game'
import { PlayerMock } from './util/mock/player-mock'
import { GameState } from '../arcomage/src/app/engine/enum/game-state.enum';
import { GameSide } from '../arcomage/src/app/engine/enum/game-side.enum';
import CARDS from '../arcomage/src/assets/cards.json';
import { PlayerDTO } from '../arcomage/src/app/engine/dto/player-dto';
import { Waist } from '../arcomage/src/app/engine/model/waist';
import { CardIdx } from '../arcomage/src/app/engine/enum/card-idx.enum';
import _ from 'lodash';
import { CardDTO } from '../arcomage/src/app/engine/dto/card-dto';

describe('Game', function () {
    describe('#changeGameStateIfWin()', function () {
        it('expect changeGameStateIfWin set to GameState.END and whoWin set null if both player have tower >= towerHeightForWin', function () {
            const playerRed = PlayerMock.EmptyPlayer();
            playerRed.castle.tower = 11;
            const playerBlue = PlayerMock.EmptyPlayer();
            playerBlue.castle.tower = 10;
            const game = new Game(null, playerRed, playerBlue, 10);
            game['changeGameStateIfWin']();
            expect(game.gameState).to.be.equal(GameState.END);
            expect(game.whoWin).to.be.null;
        });
        it('expect changeGameStateIfWin set to GameState.END and playerRed as winner if playerRed have tower >= towerHeightForWin and playerBlue have tower < towerHeightForWin', function () {
            const playerRed = PlayerMock.EmptyPlayer();
            playerRed.castle.tower = 11;
            const playerBlue = PlayerMock.EmptyPlayer();
            playerBlue.castle.tower = 9;
            const game = new Game(null, playerRed, playerBlue, 10);
            game['changeGameStateIfWin']();
            expect(game.gameState).to.be.equal(GameState.END);
            expect(game.whoWin).to.be.equal(GameSide.PLAYER_RED);
        });
        it('expect changeGameStateIfWin set to GameState.END and playerBlue as winner if playerBlue have tower >= towerHeightForWin and playerRed have tower < towerHeightForWin', function () {
            const playerRed = PlayerMock.EmptyPlayer();
            playerRed.castle.tower = 9;
            const playerBlue = PlayerMock.EmptyPlayer();
            playerBlue.castle.tower = 11;
            const game = new Game(null, playerRed, playerBlue, 10);
            game['changeGameStateIfWin']();
            expect(game.gameState).to.be.equal(GameState.END);
            expect(game.whoWin).to.be.equal(GameSide.PLAYER_BLUE);
        });
        it('expect changeGameStateIfWin set to GameState.END and whoWin set null if both player have tower == 0', function () {
            const playerRed = PlayerMock.EmptyPlayer();
            playerRed.castle.tower = 0;
            const playerBlue = PlayerMock.EmptyPlayer();
            playerBlue.castle.tower = 0;
            const game = new Game(null, playerRed, playerBlue, 10);
            game['changeGameStateIfWin']();
            expect(game.gameState).to.be.equal(GameState.END);
            expect(game.whoWin).to.be.null;
        });
        it('expect changeGameStateIfWin set to GameState.END and playerRed as winner if playerRed have tower > 0 and playerBlue have tower == 0', function () {
            const playerRed = PlayerMock.EmptyPlayer();
            playerRed.castle.tower = 4;
            const playerBlue = PlayerMock.EmptyPlayer();
            playerBlue.castle.tower = 0;
            const game = new Game(null, playerRed, playerBlue, 10);
            game['changeGameStateIfWin']();
            expect(game.gameState).to.be.equal(GameState.END);
            expect(game.whoWin).to.be.equal(GameSide.PLAYER_RED);
        });
        it('expect changeGameStateIfWin set to GameState.END and playerBlue as winner if playerBlue have tower > 0 and playerRed have tower == 0', function () {
            const playerRed = PlayerMock.EmptyPlayer();
            playerRed.castle.tower = 0;
            const playerBlue = PlayerMock.EmptyPlayer();
            playerBlue.castle.tower = 11;
            const game = new Game(null, playerRed, playerBlue, 10);
            game['changeGameStateIfWin']();
            expect(game.gameState).to.be.equal(GameState.END);
            expect(game.whoWin).to.be.equal(GameSide.PLAYER_BLUE);
        });
        it('expect changeGameStateIfWin don\'t change gameState to GameState.END if both player have tower > 0 and < towerHeightForWin', function () {
            const playerRed = PlayerMock.EmptyPlayer();
            playerRed.castle.tower = 5;
            const playerBlue = PlayerMock.EmptyPlayer();
            playerBlue.castle.tower = 3;
            const game = new Game(null, playerRed, playerBlue, 10);
            game['changeGameStateIfWin']();
            expect(game.gameState).to.be.equal(GameState.PLAY);
            expect(game.whoWin).to.be.null;
        });
    });
    describe('#playCard() for every card', function () {
        let playerRed: PlayerDTO;
        let playerBlue: PlayerDTO;
        let game: Game;
        let card: CardDTO = null;
        function setTestedCard(cardName: string) {
            card = _.find(CARDS, { 'name': cardName});
            playerRed.cards[CardIdx.ONE] = card;
        }
        function cardTestCase(cardName: string, testSuite: () => void, alternativeDescription?: string) {
            it(alternativeDescription ? alternativeDescription : 'test ' + cardName + ' card', function () {
                setTestedCard(cardName);
                testSuite();
            });
        }
        this.beforeEach(function() {
            playerRed = PlayerMock.ExamplePlayerRed();
            playerBlue = PlayerMock.ExamplePlayerBlue();
            game = new Game(new Waist(), playerRed, playerBlue, 50);
            game.lastUsedCards = [];
            card = null;
        })
        cardTestCase('r1', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 6);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState - 6 + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r2', function () {
            playerBlue.castle.wall = 1
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 1);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.true;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 1);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.false;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r3', function () {
            playerBlue.castle.wall = 1
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 3);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 1);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 3);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r4', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 3);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth + 1);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r5', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 2);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.true;
            expect(playerRed.haveCardToDiscard).to.be.equal(1);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.false;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r6', function () {
            playerRed.castle.wall = 2;
            playerBlue.castle.wall = 2;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 3);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState - 1);
            expect(playerRed.castle.wall).to.be.equal(0);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 4);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r7', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 4);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall - 1);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 3);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r7', function () {
            playerRed.castle.wall = 0;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 4);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState - 1);
            expect(playerRed.castle.wall).to.be.equal(0);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 3);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        }, 'test r7 card for playerRed who have no wall');
        cardTestCase('r8', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 6);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.true;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 2);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.false;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r9', function () {
            playerBlue.castle.wall = 2;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 3);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 3);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r10', function () {
            playerBlue.castle.wall = 2;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 5);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 3);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 2);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r11', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 6);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 4);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r12', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 7);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth + 2);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r13', function () {
            playerBlue.castle.wall = 1;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 8);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState + 2);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 4);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 1);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r14', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState + 3);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth + 1);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth + 1);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth + 1);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r15', function () {
            playerBlue.castle.wall = 1;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 5);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 5);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r16', function () {
            playerBlue.castle.wall = 1;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 6);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 6);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r17', function () {
            playerBlue.castle.wall = 1;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 6);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth - 3);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 5);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r18', function () {
            playerBlue.castle.wall = 1;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 5);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 5);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 10);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth - 5);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth - 5);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth - 5);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 5);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r19', function () {
            playerBlue.castle.wall = 1;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 8);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 5);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        }, 'test r19 card if opponent have wall != 0 damage should be 6');
        cardTestCase('r19', function () {
            playerBlue.castle.wall = 0;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 8);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 10);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        }, 'test r19 card if opponent have wall == 0 damage should be 10');
        cardTestCase('r20', function () {
            playerBlue.castle.wall = 1;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 9);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 8);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r21', function () {
            playerBlue.castle.wall = 1;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 11);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 9);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        }, 'test r21 card if opponent have wall > 0 damage should be 10');
        cardTestCase('r21', function () {
            playerBlue.castle.wall = 0;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 11);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 7);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        }, 'test r21 card if opponent have wall == 0 damage should be 7');
        cardTestCase('r22', function () {
            playerBlue.castle.wall = 1;
            playerRed.gems.growth = PlayerMock.ExampleGrowth + 1;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth + 1);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 9);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 11);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        }, 'test r22 card if opponent have less magic damage should be 12');
        cardTestCase('r22', function () {
            playerBlue.castle.wall = 1;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 9);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 7);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        }, 'test r22 card if opponent havn\'t less magic damage should be 8');
        cardTestCase('r23', function () {
            playerRed.castle.wall = PlayerMock.ExampleWall + 1;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 10);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 1);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 6);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        }, 'test r23 card if opponent have less wall damage to tower should be 6');
        cardTestCase('r23', function () {
            playerRed.castle.wall = 1;
            playerBlue.castle.wall = 1;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 10);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(1);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 5);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        }, 'test r23 card if opponent havn\'t less wall damage should be 6');
        cardTestCase('r24', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 14);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth - 8);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 5);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r25', function () {
            playerBlue.castle.wall = 1;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 11);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth - 1);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 7);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r26', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState + 3);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState + 5);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 12);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth - 5);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth - 10);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r27', function () {
            playerBlue.castle.wall = 1;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 15);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 4);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 9);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r28', function () {
            playerBlue.castle.wall = 1;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 17);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState - 5);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth - 1);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 9);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r29', function () {
            playerRed.castle.wall = 2;
            playerBlue.castle.wall = 1;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 2);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(2);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 2);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        }, 'test r29 card if opponent have less wall damage should be 3');
        cardTestCase('r29', function () {
            playerRed.castle.wall = 1;
            playerBlue.castle.wall = 1;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 2);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(1);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 1);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        }, 'test r29 card if opponent havn\'t less wall damage should be 2');
        cardTestCase('r30', function () {
            playerBlue.castle.wall = 1;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState + 1);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 2);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 2);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r31', function () {
            playerBlue.castle.wall = 1;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 4);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState - 3);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 7);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r32', function () {
            playerBlue.castle.wall = 1;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 3);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 13);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 12);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('r33', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 18);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 12);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('rd', function () {
            playerBlue.castle.wall = 1;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 25);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth - 10);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth - 1);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 19);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s1', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 8);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth - 8);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s2', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState + 2);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState + 2);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.true;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.false;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s3', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 1);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 1);
            expect(playerRed.isMyTurn).to.be.true;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.false;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s4', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 3);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth + 1);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s5', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 4);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth + 1);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        }, 'Test s5 card for equal quarry');
        cardTestCase('s5', function () {
            playerRed.bricks.growth = 0;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 4);
            expect(playerRed.bricks.growth).to.be.equal(2);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        }, 'Test s5 card for less quarry');
        cardTestCase('s6', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 7);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth + 1);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 4);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s7', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 2);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 6);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 5);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s8', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 5);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        }, 'Test s8 card for equal quarry');
        cardTestCase('s8', function () {
            playerRed.bricks.growth = 0;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 5);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        }, 'Test s8 card for less quarry');
        cardTestCase('s9', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 2);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 3);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s10', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 3);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 4);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s11', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 8);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 8);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s12', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth - 1);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState + 5);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 10);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s13', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 6);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth + 2);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s14', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 4);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth - 1);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s15', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 5);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 6);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s16', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth - 1);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth - 1);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s17', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 8);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth + 1);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.true;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.false;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s18', function () {
            playerRed.castle.wall = 4;
            playerBlue.castle.wall = 4;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 7);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(0);
            expect(playerRed.isMyTurn).to.be.true;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.false;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        }, 'Test s18 card for wall less than 5');
        cardTestCase('s18', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 7);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall - 5);
            expect(playerRed.isMyTurn).to.be.true;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall - 5);
            expect(playerBlue.isMyTurn).to.be.false;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        }, 'Test s18 card for wall greather than 5');
        cardTestCase('s19', function () {
            playerRed.castle.wall = 0;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 3);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(6);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        }, 'Test s19 card for wall equal 0');
        cardTestCase('s19', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 3);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 3);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        }, 'Test s19 card for wall not equal 0');
        cardTestCase('s20', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 2);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth + 1);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState + 4);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth + 1);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth + 1);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s21', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 9);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth + 1);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 5);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s22', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 9);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState + 7);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 7);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s23', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 11);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState + 3);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 6);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s24', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 13);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 12);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s25', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 15);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState + 5);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 8);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s26', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 16);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 15);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s27', function () {
            playerBlue.castle.wall = 1
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 18);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 6);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 9);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s28', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 7);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState - 5);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 9);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s29', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 1);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState + 2);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState + 1);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 1);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s30', function () {
            playerRed.castle.wall = 9;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 6);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth - 1);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState - 2);
            expect(playerRed.castle.wall).to.be.equal(9);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        }, 'Test s30 if player red have lowest wall');
        cardTestCase('s30', function () {
            playerBlue.castle.wall = 9;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 6);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth - 1);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 2);
            expect(playerBlue.castle.wall).to.be.equal(9);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        }, 'Test s30 if player blue have lowest wall');
        cardTestCase('s31', function () {
            playerBlue.recruits.growth = 2;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 10);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState + 6);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth + 1);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 6);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + 2);
            expect(playerBlue.recruits.growth).to.be.equal(2);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        }, 'Test s31 if player red have lowest dungeon');
        cardTestCase('s31', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 10);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState + 6);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 6);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        }, 'Test s31 if player red haven\'t lowest dungeon');
        cardTestCase('s32', function () {
            playerBlue.castle.wall = 1;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 14);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 7);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 5);
            expect(playerBlue.castle.wall).to.be.equal(0);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('s33', function () {
            playerBlue.castle.wall = 1;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 17);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(1);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('sd', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 24);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState + 8);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 20);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('w1', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 1);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState + 1);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.true;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.false;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('w2', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 2);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.true;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 1);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.false;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('w3', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 2);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState + 3);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('w4', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 3);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth + 1);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('w5', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 2);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.true;
            expect(playerRed.haveCardToDiscard).to.be.equal(1);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.false;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('w6', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 5);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState + 3);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('w6', function () {
            game.discardCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.true;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.false;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        }, 'Test w6 card try to discard');
        cardTestCase('w7', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 4);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState + 2);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 2);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('w8', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 6);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth + 1);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState + 3);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState + 1);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('w9', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 2);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 3);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('w10', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 3);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState + 5);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('w11', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 4);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 5);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('w12', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 3);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth + 2);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState - 5);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('w13', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 7);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth + 1);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState + 3);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 3);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('w14', function () {
            playerBlue.gems.growth = 3;
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 7);
            expect(playerRed.gems.growth).to.be.equal(3);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + 3);
            expect(playerBlue.gems.growth).to.be.equal(3);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('w15', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 6);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState + 8);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('w16', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 9);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth + 1);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState + 5);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('w17', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 8);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth - 1);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 9);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('w18', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 7);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState + 5);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth - 6);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('w19', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 10);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState + 11);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('w20', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 5);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth - 1);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState - 7);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth - 1);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth - 1);
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 7);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('w21', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 13);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState + 6);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth );
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState - 4);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('w22', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState - 10);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 4);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState + 7);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth );
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('w23', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 12);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState + 8);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall + 3);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth );
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('w24', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 14);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth + 1);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState + 8);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth );
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
        cardTestCase('w25', function () {
            game.playCard(CardIdx.ONE, playerRed, playerBlue);
            expect(playerRed.bricks.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.gems.state).to.be.equal(PlayerMock.ExampleState - 16);
            expect(playerRed.gems.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.recruits.state).to.be.equal(PlayerMock.ExampleState);
            expect(playerRed.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerRed.castle.tower).to.be.equal(PlayerMock.ExampleState + 15);
            expect(playerRed.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerRed.isMyTurn).to.be.false;
            expect(playerRed.haveCardToDiscard).to.be.equal(0);
            expect(playerBlue.bricks.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.bricks.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.gems.growth).to.be.equal(PlayerMock.ExampleGrowth );
            expect(playerBlue.recruits.state).to.be.equal(PlayerMock.ExampleState + PlayerMock.ExampleGrowth);
            expect(playerBlue.recruits.growth).to.be.equal(PlayerMock.ExampleGrowth);
            expect(playerBlue.castle.tower).to.be.equal(PlayerMock.ExampleState);
            expect(playerBlue.castle.wall).to.be.equal(PlayerMock.ExampleWall);
            expect(playerBlue.isMyTurn).to.be.true;
            expect(playerBlue.haveCardToDiscard).to.be.equal(0);
        });
    });
});

